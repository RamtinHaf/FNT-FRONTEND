{"remainingRequest":"/Users/ramtinhafezinejad/Documents/Bachelor/Saman/Ramtin-Saman-Vue/forgerynewstrackervue/frontend/node_modules/babel-loader/lib/index.js!/Users/ramtinhafezinejad/Documents/Bachelor/Saman/Ramtin-Saman-Vue/forgerynewstrackervue/frontend/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/ramtinhafezinejad/Documents/Bachelor/Saman/Ramtin-Saman-Vue/forgerynewstrackervue/frontend/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/Users/ramtinhafezinejad/Documents/Bachelor/Saman/Ramtin-Saman-Vue/forgerynewstrackervue/frontend/src/views/LandingPage.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/ramtinhafezinejad/Documents/Bachelor/Saman/Ramtin-Saman-Vue/forgerynewstrackervue/frontend/src/views/LandingPage.vue","mtime":1619468069009},{"path":"/Users/ramtinhafezinejad/Documents/Bachelor/Saman/Ramtin-Saman-Vue/forgerynewstrackervue/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1619426444794},{"path":"/Users/ramtinhafezinejad/Documents/Bachelor/Saman/Ramtin-Saman-Vue/forgerynewstrackervue/frontend/node_modules/babel-loader/lib/index.js","mtime":1619426444695},{"path":"/Users/ramtinhafezinejad/Documents/Bachelor/Saman/Ramtin-Saman-Vue/forgerynewstrackervue/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1619426444794},{"path":"/Users/ramtinhafezinejad/Documents/Bachelor/Saman/Ramtin-Saman-Vue/forgerynewstrackervue/frontend/node_modules/vue-loader-v16/dist/index.js","mtime":1619426455942}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9zbGljZWRUb0FycmF5IGZyb20gIi9Vc2Vycy9yYW10aW5oYWZlemluZWphZC9Eb2N1bWVudHMvQmFjaGVsb3IvU2FtYW4vUmFtdGluLVNhbWFuLVZ1ZS9mb3JnZXJ5bmV3c3RyYWNrZXJ2dWUvZnJvbnRlbmQvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3NsaWNlZFRvQXJyYXkiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL3JhbXRpbmhhZmV6aW5lamFkL0RvY3VtZW50cy9CYWNoZWxvci9TYW1hbi9SYW10aW4tU2FtYW4tVnVlL2ZvcmdlcnluZXdzdHJhY2tlcnZ1ZS9mcm9udGVuZC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvciI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnRvLXN0cmluZy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiOwovLyBpbXBvcnQgU2lkZWJhciBmcm9tICcuLi9jb21wb25lbnRzL1NpZGViYXIudnVlJzsKaW1wb3J0IFR3aXR0ZXJBUEkgZnJvbSAnLi4vYmFja2VuZF9hcGkvdHdpdHRlci5qcyc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnTGFuZGluZ1BhZ2UnLAogIGNvbXBvbmVudHM6IHsvLyBTaWRlYmFyLAogIH0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGNvZGU6IHVuZGVmaW5lZCwKICAgICAgY29kZVJlc29sdmVyOiB1bmRlZmluZWQsCiAgICAgIHVzZXJzOiBbLy8gewogICAgICAgIC8vICAgbmFtZTogIlJhbSIKICAgICAgICAvLyB9LAogICAgICBdCiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgZ290b1BhZ2U6IGZ1bmN0aW9uIGdvdG9QYWdlKCkgewogICAgICB0aGlzLiRyb3V0ZXIucHVzaCgnL3lvdXJ0cmFja2VycycpOwogICAgfSwKICAgIGxvZ2luOiBmdW5jdGlvbiBsb2dpbigpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgICAgdmFyIHRjOwogICAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgICAgd2hpbGUgKDEpIHsKICAgICAgICAgICAgc3dpdGNoIChfY29udGV4dC5wcmV2ID0gX2NvbnRleHQubmV4dCkgewogICAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICAgIHRjID0gbmV3IFR3aXR0ZXJBUEkoKTsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSAzOwogICAgICAgICAgICAgICAgcmV0dXJuIHRjLmdldFJlcXVlc3RUb2tlbigpLnRoZW4oZnVuY3Rpb24gKF9yZWYpIHsKICAgICAgICAgICAgICAgICAgdmFyIHJlcXVlc3Rfa2V5ID0gX3JlZi5yZXF1ZXN0X2tleSwKICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3Rfc2VjcmV0ID0gX3JlZi5yZXF1ZXN0X3NlY3JldDsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coInJlZGlyZWN0aW5nIHVzZXIgdG8gdHdpdHRlciBzaWduaW4gcGFnZSIpOyAvLyAybmQgc3RlcCBvZiBhdXRoZW50aWNhdGlvbiwgb3BlbnMgYSBuZXcgd2luZG93IGZvciB0d2l0dGVyIGF1dGguLgoKICAgICAgICAgICAgICAgICAgLy8gMm5kIHN0ZXAgb2YgYXV0aGVudGljYXRpb24sIG9wZW5zIGEgbmV3IHdpbmRvdyBmb3IgdHdpdHRlciBhdXRoLi4KICAgICAgICAgICAgICAgICAgd2luZG93Lm9wZW4oImh0dHBzOi8vYXBpLnR3aXR0ZXIuY29tL29hdXRoL2F1dGhvcml6ZT9vYXV0aF90b2tlbj0iLmNvbmNhdChyZXF1ZXN0X2tleSksICJfYmxhbmsiKTsgLy8gc2V0dGluZyB0byBgIiJgIHdpbGwgY2hhbmdlIHRoZSB2aWV3IHNvIHRvIGFjY2VwdCBhIGNvZGUuCgogICAgICAgICAgICAgICAgICAvLyBzZXR0aW5nIHRvIGAiImAgd2lsbCBjaGFuZ2UgdGhlIHZpZXcgc28gdG8gYWNjZXB0IGEgY29kZS4KICAgICAgICAgICAgICAgICAgX3RoaXMuY29kZSA9ICIiOwogICAgICAgICAgICAgICAgICByZXR1cm4gewogICAgICAgICAgICAgICAgICAgIHJlcXVlc3Rfa2V5OiByZXF1ZXN0X2tleSwKICAgICAgICAgICAgICAgICAgICByZXF1ZXN0X3NlY3JldDogcmVxdWVzdF9zZWNyZXQKICAgICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHRva2VuKSB7CiAgICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLmFsbChbdG9rZW4sIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmNvZGVSZXNvbHZlciA9IHJlc29sdmU7CiAgICAgICAgICAgICAgICAgIH0pXSk7CiAgICAgICAgICAgICAgICB9KSAvLyAzcmQgc3RlcCBvZiBhdXRoZW50aWNhdGlvbi4gCiAgICAgICAgICAgICAgICAuIC8vIDNyZCBzdGVwIG9mIGF1dGhlbnRpY2F0aW9uLiAKICAgICAgICAgICAgICAgIHRoZW4oZnVuY3Rpb24gKF9yZWYyKSB7CiAgICAgICAgICAgICAgICAgIHZhciBfcmVmMyA9IF9zbGljZWRUb0FycmF5KF9yZWYyLCAyKSwKICAgICAgICAgICAgICAgICAgICAgIF9yZWYzJCA9IF9yZWYzWzBdLAogICAgICAgICAgICAgICAgICAgICAgcmVxdWVzdF9rZXkgPSBfcmVmMyQucmVxdWVzdF9rZXksCiAgICAgICAgICAgICAgICAgICAgICByZXF1ZXN0X3NlY3JldCA9IF9yZWYzJC5yZXF1ZXN0X3NlY3JldCwKICAgICAgICAgICAgICAgICAgICAgIHZlcmlmaWVyX2NvZGUgPSBfcmVmM1sxXTsKCiAgICAgICAgICAgICAgICAgIHJldHVybiB0Yy5nZXRBY2Nlc3NUb2tlbihyZXF1ZXN0X2tleSwgcmVxdWVzdF9zZWNyZXQsIHZlcmlmaWVyX2NvZGUpOwogICAgICAgICAgICAgICAgfSkudGhlbihmdW5jdGlvbiAoX3JlZjQpIHsKICAgICAgICAgICAgICAgICAgdmFyIGFjY2Vzc19rZXkgPSBfcmVmNC5hY2Nlc3Nfa2V5LAogICAgICAgICAgICAgICAgICAgICAgYWNjZXNzX3NlY3JldCA9IF9yZWY0LmFjY2Vzc19zZWNyZXQ7CiAgICAgICAgICAgICAgICAgIC8vIG5vdyB0aGUgbG9naW4gaXMgY29tcGxldGVkLCBzdG9yZSB0aGUgdmFsdWVzIGluIGEgbG9jYWxzdG9yYWdlLgogICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhhY2Nlc3Nfa2V5KTsKICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coYWNjZXNzX3NlY3JldCk7CiAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJ5YWFheSIpOwogICAgICAgICAgICAgICAgfSk7CgogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgICAgcmV0dXJuIF9jb250ZXh0LnN0b3AoKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0sIF9jYWxsZWUpOwogICAgICB9KSkoKTsKICAgIH0sCiAgICBzdWJtaXRWZXJpZmllckNvZGU6IGZ1bmN0aW9uIHN1Ym1pdFZlcmlmaWVyQ29kZSgpIHsKICAgICAgdGhpcy5jb2RlUmVzb2x2ZXIodGhpcy5jb2RlKTsKICAgICAgdGhpcy5jb2RlID0gdW5kZWZpbmVkOwogICAgfQogIH0KfTs="},{"version":3,"sources":["/Users/ramtinhafezinejad/Documents/Bachelor/Saman/Ramtin-Saman-Vue/forgerynewstrackervue/frontend/src/views/LandingPage.vue"],"names":[],"mappings":";;;;;;AA4BA;AACA,OAAO,UAAP,MAAuB,2BAAvB;AAIA,eAAe;AACX,EAAA,IAAI,EAAE,aADK;AAEX,EAAA,UAAU,EAAC,CACP;AADO,GAFA;AAKX,EAAA,IALW,kBAKL;AACF,WAAM;AACJ,MAAA,IAAI,EAAE,SADF;AAEJ,MAAA,YAAY,EAAE,SAFV;AAGJ,MAAA,KAAK,EAAE,CACH;AACA;AACA;AAHG;AAHH,KAAN;AASH,GAfU;AAgBX,EAAA,OAAO,EAAE;AACT,IAAA,QADS,sBACC;AACR,WAAK,OAAL,CAAa,IAAb,CAAkB,eAAlB;AACD,KAHQ;AAIH,IAAA,KAJG,mBAIK;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACR,gBAAA,EADQ,GACH,IAAI,UAAJ,EADG;AAAA;AAAA,uBAEN,EAAE,CAAC,eAAH,GACH,IADG,CACE,gBAAmC;AAAA,sBAAjC,WAAiC,QAAjC,WAAiC;AAAA,sBAApB,cAAoB,QAApB,cAAoB;AACvC,kBAAA,OAAO,CAAC,GAAR,CAAY,yCAAZ,EADuC,CAGvC;;AAAA;AACA,kBAAA,MAAM,CAAC,IAAP,+DAAmE,WAAnE,GAAkF,QAAlF,EAJuC,CAKvC;;AAAA;AACA,kBAAA,KAAI,CAAC,IAAL,GAAY,EAAZ;AACA,yBAAO;AAAC,oBAAA,WAAW,EAAX,WAAD;AAAc,oBAAA,cAAc,EAAd;AAAd,mBAAP;AACD,iBATG,EAUH,IAVG,CAUE,UAAA,KAAI;AAAA,yBAAK,OAAO,CAAC,GAAR,CAAY,CAAC,KAAD,EAAQ,IAAI,OAAJ,CAAY,UAAC,OAAD;AAAA,2BAAa,KAAI,CAAC,YAAL,GAAoB,OAAjC;AAAA,mBAAZ,CAAR,CAAZ,CAAL;AAAA,iBAVN,EAYJ;AAZI,kBAYJ;AACC,gBAAA,IAbG,CAaE;AAAA;AAAA;AAAA,sBAAG,WAAH,UAAG,WAAH;AAAA,sBAAgB,cAAhB,UAAgB,cAAhB;AAAA,sBAAiC,aAAjC;;AAAA,yBAAoD,EAAE,CAAC,cAAH,CAAkB,WAAlB,EAA+B,cAA/B,EAA+C,aAA/C,CAApD;AAAA,iBAbF,EAcH,IAdG,CAcE,iBAAiC;AAAA,sBAA/B,UAA+B,SAA/B,UAA+B;AAAA,sBAAnB,aAAmB,SAAnB,aAAmB;AACrC;AACA,kBAAA,OAAO,CAAC,GAAR,CAAY,UAAZ;AACA,kBAAA,OAAO,CAAC,GAAR,CAAY,aAAZ;AACA,kBAAA,OAAO,CAAC,GAAR,CAAY,OAAZ;AACD,iBAnBG,CAFM;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAsBb,KA1BQ;AA2BT,IAAA,kBA3BS,gCA2BY;AACnB,WAAK,YAAL,CAAkB,KAAK,IAAvB;AACA,WAAK,IAAL,GAAY,SAAZ;AACF;AA9BS;AAhBE,CAAf","sourcesContent":["<template>\n<div class=\"container\">\n    <!-- this how u put images in site -->\n    <!-- <img src=\"..assets/Forgery_News_tracker_NEW.png\" width=\"500px\" height=\"500px\"><br> -->\n    <!-- <div id=\"users_list\"> \n      <ul>        \n        <li v-for=\"u of users\" :key=\"u.name\">\n          {{ u.name }}\n        </li>   \n      </ul>\n    </div> -->\n    <template v-if=\"code === undefined\">\n      <button class=\"btn bg-transparent\" @click=\"login()\"><img class=\"twt-pic\" :src=\"require('../assets/twitter_button.png')\"></button>\n    </template>\n    <template v-else>\n      <label>Code</label>\n      <input placeholder=\"Code from twitter login page\" v-model=\"code\">\n      <button style=\"margin-top:20px\" class=\"btn btn-primary\" @click=\"submitVerifierCode()\">Submit code</button>\n    </template>\n    <button style=\"margin-top:20px\" class=\"btn btn-primary\" @click=\"gotoPage()\">Redirect to Your Trackers</button><br><br>\n  </div>\n\n\n</template>\n\n\n\n<script>\n// import Sidebar from '../components/Sidebar.vue';\nimport TwitterAPI from '../backend_api/twitter.js';\n\n\n\nexport default {\n    name: 'LandingPage',\n    components:{\n        // Sidebar,\n    },\n    data(){\n        return{\n          code: undefined,\n          codeResolver: undefined,\n          users: [\n              // {\n              //   name: \"Ram\"\n              // },\n            ]\n        }\n    },\n    methods: {\n    gotoPage(){\n      this.$router.push('/yourtrackers');\n    },\n    async login() {\n      let tc = new TwitterAPI();\n      await tc.getRequestToken()\n        .then(({request_key, request_secret}) => {\n          console.log(\"redirecting user to twitter signin page\");\n\n          // 2nd step of authentication, opens a new window for twitter auth..\n          window.open(`https://api.twitter.com/oauth/authorize?oauth_token=${request_key}`, \"_blank\");\n          // setting to `\"\"` will change the view so to accept a code.\n          this.code = \"\";\n          return {request_key, request_secret};\n        })\n        .then(token => Promise.all([token, new Promise((resolve) => this.codeResolver = resolve)]))\n\n        // 3rd step of authentication. \n        .then(([{request_key, request_secret}, verifier_code]) => tc.getAccessToken(request_key, request_secret, verifier_code))\n        .then(({access_key, access_secret}) => {\n          // now the login is completed, store the values in a localstorage.\n          console.log(access_key);\n          console.log(access_secret);\n          console.log(\"yaaay\");\n        });\n    },\n    submitVerifierCode() {\n      this.codeResolver(this.code);\n      this.code = undefined;\n    }\n  }\n\n}\n</script>\n\n<style scoped>\n  .sign-in{\n    width: 50px;\n  }\n  .twt-btn{\n    width: 50%;\n    height: auto;\n  }\n  img{\n    width: 45%;\n    height: auto;\n  }\n</style>"],"sourceRoot":""}]}